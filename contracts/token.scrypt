import "util.scrypt";

/**
 * A toy token example between two holders
 */
contract Token {
    public function transfer(PubKey sender, Sig senderSig, PubKey receiver, 
		int value /* amount to be transferred */, bytes txPreimage, int amount) {
        Tx tx = new Tx();
		// this ensures the preimage is for the current tx
		require(tx.validate(txPreimage));

        // authorize
        require(checkSig(senderSig, sender));

        // read previous locking script
        bytes lockingScript = Util.readVarint(txPreimage[104:]);
        int scriptLen = length(lockingScript);

        PubKey pk0 = PubKey(lockingScript[scriptLen - 68 : scriptLen - 35]);
        int balance0 = unpack(lockingScript[scriptLen - 35 : scriptLen - 34]);
        PubKey pk1 = PubKey(lockingScript[scriptLen - 34 : scriptLen - 1]);
        int balance1 = unpack(lockingScript[scriptLen - 1 : ]);

        // only between two holders
        require(sender == pk0 && receiver == pk1 || sender == pk1  && receiver == pk0);

        // transfer
        if (sender == pk0) {
            require(balance0 >= value);
            balance0 = balance0 - value;
            balance1 = balance1 + value;
        } else {
            require(balance1 >= value);
            balance1 = balance1 - value;
            balance0 = balance0 + value;
        }

        // write new locking script
        bytes lockingScript_ = lockingScript[: scriptLen - 68] ++ pk0 ++ num2bin(balance0, 1) ++ pk1 ++ num2bin(balance1, 1);
        int len = length(txPreimage);
        bytes hashOutputs = txPreimage[len - 40 : len - 8];
        Sha256 hashOutputs_ = hash256(num2bin(amount, 8) ++ Util.writeVarint(lockingScript_));
		require(hashOutputs == hashOutputs_);
    }
}