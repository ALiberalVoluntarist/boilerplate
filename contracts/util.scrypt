contract Util {
    static function readVarint(bytes b) returns (bytes) {
		int len = 0;
		bytes ret = b"";
		bytes header = b[0:1];

		if (header == b"fd") {
			len = Util.fromLEUnsigned(b[1:3]);
			ret = b[3:3+len];
		} else if (header == b"fe") {
			len = Util.fromLEUnsigned(b[1:5]);
			ret = b[5:5+len];
		} else if (header == b"ff") {
			len = Util.fromLEUnsigned(b[1:9]);
			ret = b[9:9+len];
		} else {
			len = Util.fromLEUnsigned(b[0:1]);
			ret = b[1:1+len];
		}

		return ret;
	}

    static function writeVarint(bytes b) returns (bytes) {
		int n = length(b);
		
		bytes header = b"";

		if (n < 0xfd) {
			header = Util.toLEUnsigned(n, 1);
		} else if (n < 0x10000) {
			header = b"fd" ++ Util.toLEUnsigned(n, 2);
		} else if (n < 0x100000000) {
			header = b"fe" ++ Util.toLEUnsigned(n, 4);
		} else if (n < 0x10000000000000000) {
			header = b"ff" ++ Util.toLEUnsigned(n, 8);
		}

		return header ++ b;
	}

    // convert signed integer `n` to unsigned integer of `len` bytes, in little endian
	static function toLEUnsigned(int n, int len) returns (bytes) {
		// one extra byte to accommodate possible negative sign byte
		bytes m = num2bin(n, len + 1);
		// remove sign byte
		return m[0 : length(m) - 1];
	}

    static function fromLEUnsigned(bytes b) returns (int) {
		// append positive sign byte. This does not hurt even when sign bit is already positive
		return unpack(b ++ b"00");
	} 
}